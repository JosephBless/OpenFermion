
OpenFermion is an open source library for compiling and analyzing quantum algorithms to simulate fermionic systems, including quantum chemistry. Among other functionalities, this version features data structures and tools for obtaining and manipulating representations of fermionic and qubit Hamiltonians. For more information, see our release paper.

 Documentation Status  https://img.shields.io/pypi/dm/openfermion
Run the interactive Jupyter Notebooks in Colab or MyBinder:

Installation and Documentation
Installing the latest stable OpenFermion requires pip. Make sure that you are using an up-to-date version of it.

Documentation can be found at quantumai.google/openfermion and the following links

Installation
API Docs
Tutorials
Currently, OpenFermion is tested on Mac, Windows, and Linux. We recommend using Mac or Linux because the electronic structure plugins are only compatible on these platforms. However, for those who would like to use Windows, or for anyone having other difficulties with installing OpenFermion or its plugins, we have provided a Docker image and usage instructions in the docker folder. The Docker image provides a virtual environment with OpenFermion and select plugins pre-installed. The Docker installation should run on any operating system.

You might also want to explore the alpha release of the OpenFermion Cloud Library where users can share and download precomputed molecular benchmark files.

Developer install
To install the latest version of OpenFermion (in development mode):

git clone https://github.com/quantumlib/OpenFermion
cd OpenFermion
python -m pip install -e .
Library install
To install the latest PyPI release as a library (in user mode):

python -m pip install --user openfermion
Plugins
OpenFermion relies on modular plugin libraries for significant functionality. Specifically, plugins are used to simulate and compile quantum circuits and to perform classical electronic structure calculations. Follow the links below to learn more!

High performance simulators
OpenFermion-FQE is a high performance emulator of fermionic quantum evolutions specified by a sequence of fermion operators, which can exploit fermionic symmetries such as spin and particle number.
Circuit compilation plugins
Forest-OpenFermion to support integration with Forest.
SFOpenBoson to support integration with Strawberry Fields.
Electronic structure package plugins
OpenFermion-Psi4 to support integration with Psi4.
OpenFermion-PySCF to support integration with PySCF.
OpenFermion-Dirac to support integration with DIRAC.
How to contribute
We'd love to accept your contributions and patches to OpenFermion. There are a few small guidelines you need to follow. Contributions to OpenFermion must be accompanied by a Contributor License Agreement. You (or your employer) retain the copyright to your contribution, this simply gives us permission to use and redistribute your contributions as part of the project. Head over to https://cla.developers.google.com/ to see your current agreements on file or to sign a new one.

All submissions, including submissions by project members, require review. We use GitHub pull requests for this purpose. Consult GitHub Help for more information on using pull requests. Furthermore, please make sure your new code comes with extensive tests! We use automatic testing to make sure all pull requests pass tests and do not decrease overall test coverage by too much. Make sure you adhere to our style guide. Just have a look at our code for clues. We mostly follow PEP 8 and use the corresponding linter to check for it. Code should always come with documentation, which is generated automatically and can be found here.

We use Github issues for tracking requests and bugs. Please post questions to the Quantum Computing Stack Exchange with an 'openfermion' tag.

Authors
Ryan Babbush (Google), Jarrod McClean (Google), Nicholas Rubin (Google), Kevin Sung (University of Michigan), Ian Kivlichan (Harvard), Dave Bacon (Google), Xavier Bonet-Monroig (Leiden University), Yudong Cao (Harvard), Chengyu Dai (University of Michigan), E. Schuyler Fried (Harvard), Craig Gidney (Google), Brendan Gimby (University of Michigan), Pranav Gokhale (University of Chicago), Thomas Häner (ETH Zurich), Tarini Hardikar (Dartmouth), Vojtĕch Havlíček (Oxford), Oscar Higgott (University College London), Cupjin Huang (University of Michigan), Josh Izaac (Xanadu), Zhang Jiang (NASA), William Kirby (Tufts University), Xinle Liu (Google), Sam McArdle (Oxford), Matthew Neeley (Google), Thomas O'Brien (Leiden University), Bryan O'Gorman (UC Berkeley, NASA), Isil Ozfidan (D-Wave Systems), Max Radin (UC Santa Barbara), Jhonathan Romero (Harvard), Daniel Sank (Google), Nicolas Sawaya (Harvard), Bruno Senjean (Leiden University), Kanav Setia (Dartmouth), Hannah Sim (Harvard), Damian Steiger (ETH Zurich), Mark Steudtner (Leiden University), Qiming Sun (Caltech), Wei Sun (Google), Daochen Wang (River Lane Research), Chris Winkler (University of Chicago), Fang Zhang (University of Michigan) and Emiel Koridon (Leiden University).

How to cite
When using OpenFermion for research projects, please cite:

Jarrod R McClean, Nicholas C Rubin, Kevin J Sung, Ian D Kivlichan, Xavier Bonet-Monroig, Yudong Cao, Chengyu Dai, E Schuyler Fried, Craig Gidney, Brendan Gimby, Pranav Gokhale, Thomas Häner, Tarini Hardikar, Vojtěch Havlíček, Oscar Higgott, Cupjin Huang, Josh Izaac, Zhang Jiang, Xinle Liu, Sam McArdle, Matthew Neeley, Thomas O'Brien, Bryan O'Gorman, Isil Ozfidan, Maxwell D Radin, Jhonathan Romero, Nicolas P D Sawaya, Bruno Senjean, Kanav Setia, Sukin Sim, Damian S Steiger, Mark Steudtner, Qiming Sun, Wei Sun, Daochen Wang, Fang Zhang, and Ryan Babbush OpenFermion: The Electronic Structure Package for Quantum Computers. Quantum Science and Technology 5.3 (2020): 034014.
